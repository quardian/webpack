┌───────────────────────────────────────────────┐
    웹팩(Webpack) 설정파일
└───────────────────────────────────────────────┘
    - 공식 사이트 : webpack.js.org (현재버전 5)
    - webpack --mode=none --entry=src/index.js ...
    - 위와 같이 웹팩 빌드시, 옵션을 지정할 수도 있지만 
      별도의 웹팩 설정파일(webpack.config.js)로 지정이 가능하다.


 1. /webpack.config.js 파일 추가 
    ┌───────────────────────────────────────────────┐
        var path = require('path');

        module.exports = {
            mode: 'none',
            entry: './src/index.js',
            output: {
                filename: 'main.js',
                path: path.resolve(__dirname, 'dist')
            }
        }
    └───────────────────────────────────────────────┘

2. package.json 파일내 "scripts" 속성의 build 명령에서 옵션을 제거한다.
    ┌───────────────────────────────────────────────┐
        "scripts" : {
            //"build":"webpack --mode=none"
            "build":"webpack"
        }
    └───────────────────────────────────────────────┘        


3. 웹팩의 4 가지 주요 속성

    - entry
    - output 
    - loader 
    - plugin 

    1) entry 

        - entry 속성은 웹팩에서 웹 자원을 빌드하기 위해 필요한 최초 진입점이자
          자바스크립트 파일경로.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                entry: {
                    login:'./src/loginView.js',
                    main: './src/mainView.js'
                }
            }
        └───────────────────────────────────────────────┘
        - 엔트리 포인트는 1 개가 될 수도 있지만, 여러 개가 될 수도 있다.
          위와 같이 엔트리 포인트를 분리하는 경우, 싱글 페이지 애플리케이션이 아닌
        특정 페이지로 진입했을 때 서버에서 해당 정보를 보내주는 멀티 페이지 애플리케이션에 적합

    2) output 
        - output 속성은 웹팩을 돌리고 난 결과물의 파일 경로를 의미.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                output: {
                    filename: 'main.js',
                    path: path.resolve(__dirname, 'dist')
                }
            }
        └───────────────────────────────────────────────┘
        
        - output 파일 이름 옵션
          . filename 속성에 여러 가지 옵션을 넣을 수 있다.

          . 결과 파일명에 entry 속성을 포함하는 옵션
        ┌───────────────────────────────────────────────┐
            module.exports = {
                output: {
                    filename: '[name].main.js'
                }
            }
        └───────────────────────────────────────────────┘

          . 결과 파일명에 웹팩 내부적으로 사용하는 모듈 ID 포함 옵션
        ┌───────────────────────────────────────────────┐
            module.exports = {
                output: {
                    filename: '[id].main.js'
                }
            }
        └───────────────────────────────────────────────┘

          . 결과 파일명에 매 빌드 마다 고유 해시값을 붙이는 옵션
        ┌───────────────────────────────────────────────┐
            module.exports = {
                output: {
                    filename: '[name][hash].main.js'
                }
            }
        └───────────────────────────────────────────────┘        

          . 결과 파일명에 각 모듈 내용을 기준으로 생성된 해시값을 붙이는 옵션
        ┌───────────────────────────────────────────────┐
            module.exports = {
                output: {
                    filename: '[chunkhash].main.js'
                }
            }
        └───────────────────────────────────────────────┘      

    3) loader 
        - 로더(Loader)는 웹팩이 웹 어플리케이션을 해석할 때 자바스크립트 파일이 아닌
          웹 자원(HTML, CSS, Images, Font 등)을 변환할 수 있도록 도와주는 속성
        - entry나 output 속성과는 다르게 module 이라는 이름을 사용한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[]
                }
            }
        └───────────────────────────────────────────────┘      

        - CSS Loader 적용
           . NPM 명령어로 CSS 로더 설치 후, 웹팩 설정파일 변경
        ┌───────────────────────────────────────────────┐
            npm i css-loader -D 
        └───────────────────────────────────────────────┘      
            . webpack.config.js 
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[ 
                        {
                            test: /\.css$/,
                            use: ['css-loader']
                        }
                    ]
                }
            }
        └───────────────────────────────────────────────┘        
            a) test : 로더를 적용할 파일 유형 ( 정규 표현식 )
            b) use : 해당 파일에 적용할 로더 이름 

        - 자주 사용하는 로더 종류 
            . Babel Loader 
            . Sass Loader 
            . File Loader 
            . Vue Loader 
            . TS Loader 
            

        - 여러개의 로더는 rules 배열에 로더 옵션을 추가하면 된다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[ 
                        {test: /\.css$/, use: ['css-loader'] },
                        {test: /\.ts$/ , use: ['ts-loader'] },
                    ]
                }
            }
        └───────────────────────────────────────────────┘    
        
        - 로더 적용 순위
           . 특정 파일에 대해 여러 개의 로더를 사용하는 경우, 로더가 적용되는 순서 주의.
             로더는 기본적으로 <오른쪽에서 왼쪽 순서>로 적용됩니다.
           . 예시) CSS 확장 문법인 SCSS 파일 로더 적용 예
             : sass-loader 적용 후, css-loader가 적용됨 ( R -> L )
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[ 
                        {test: /\.scss$/, use: ['css-loader', 'sass-loader'] }
                    ]
                }
            }
        └───────────────────────────────────────────────┘    
            . 만약 웹팩으로 빌드 후 CSS 파일이 웹 어플리케이션에 인라인 스타일
              태그로 추가되는 것을 원한다면 아래와 같이 style 로더를 추가할 수 있다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[ 
                        {test: /\.scss$/, use: ['style-loader', 
                                                'css-loader', 
                                                'sass-loader'] }
                    ]
                }
            }
        └───────────────────────────────────────────────┘                 
            . 욥션을 포함한 로더 형태 
        ┌───────────────────────────────────────────────┐
            module.exports = {
                module: {
                    rules:[ 
                        {test: /\.scss$/, use: [
                            { loader: 'style-loader' }, 
                            { loader: 'css-loader', options:{ modules: true } },
                            { loader: 'sass-loader' }] }
                    ]
                }
            }
        └───────────────────────────────────────────────┘   

    4) plugin 
        - 플러그인(plugin)은 웹팩의 기본적인 동작에 추가적인 기능을 제공하는 속성.
          로더는 파일을 해석하고 변환하는 과정에 관여하는 반면,
          플러그인은 해당 결과물의 형태를 바꾸는 역할을 한다고 보면 된다.

        - 플러그인 선언 방법
          . 플러그인은 생성자 객체 인스턴스만 추가 가능.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                plugin: []
            }
        └───────────────────────────────────────────────┘   

        - 플러그인 선언 예제 
        ┌───────────────────────────────────────────────┐
            module.exports = {
                plugin: [ 
                    new HtmlWebpackPlugin(),
                    new webpack.ProgressPlugin()
                ]
            }
        └───────────────────────────────────────────────┘           
            . HtmlWebpackPlugin : 웹팩으로 빌드한 결과물로 HTML 파일을 생성.
            . ProgressPlugin    : 웹팩 빌드 진행율 표시.

        - 자주 사용하는 플러그인
            . split-chunks-plugin 
            . clean-webpack-plugin
            . image-webpack-loader 
            . webpack-bundle-analyzer-plugin            

4. 정리 

    1. Entry 속성
        실행할 대상 파일
    2. Output 속성 
        결과물에 대한 정보 입력 ( filename, path )
    3. Loader 속성 
        CSS, 이미지와 같은 비 자바스크립트 파일을 웹팩이 인식할 수 있게 함
        로더는 오른쪽에서 왼쪽으로 적용됨.
    4. Plugin 속성 
        웹팩으로 변환한 파일에 추가적인 기능을 더 하고 싶을 때 사용.
        웹팩 변환 과정 전반에 대한 제어권을 갖음

    위 속성 이외에 resolve, devServer, devtool 속성도 알아 두면 좋음