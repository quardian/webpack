┌───────────────────────────────────────────────┐
    웹팩(Webpack) 설정 - devServer
└───────────────────────────────────────────────┘
    
    - webpack-dev-server 는 빠르게 어플리케이션 개살하는데 사용된다.
    - webpack-dev-server(줄일말:dev-server) 행동에 영향을 미치는 옵션들 설명.



    1. devServer : object 

        - 프로젝트 루트 안의 public/ 디렉토리의 모든 것을 gzip으로 압축해서 제공하는 예제.
        ┌───────────────────────────────────────────────┐
            const path = require('path');

            module.exports = {
                //...
                devServer: {
                    static: {
                        directory: path.join(__dirname, 'public'),
                    },
                    compress: true,
                    port: 9000,
                },
            };
        └───────────────────────────────────────────────┘
        - Node.js API를 통해 dev-server를 사용하는 경우 devServer 옵션이 무시됩니다.
        - 대신 옵션을 첫 번째 매개변수로 전달합니다.
          new WebpackDevServer({...}, compiler).


    2. CLI를 통한 사용

        - CLI 를 통한 webpack-dev-server를 호출할 수 있다.
        - https://webpack.js.org/api/webpack-dev-server/
        ┌───────────────────────────────────────────────┐
            npx webpack serve
        └───────────────────────────────────────────────┘

    3. devServer.allowedHosts

        - 'auto' | 'all' [string]
        -  이 옵션은 개발 서버에 접근이 허용되는 화이트리스트 서비스 설정.
        - . 로 시작하는 값은 서브도메인 와일드카드로 사용된다.
        - 'all' 로 설정 시, 호스트 체크를 하지 않는다. ( 이것은 추천 되지 않는다.)
        ┌───────────────────────────────────────────────┐
            module.exports = {
            //...
            devServer: {
                allowedHosts: [
                'host.com',
                'subdomain.host.com',
                'subdomain2.host.com',
                '.host2.com',
                ],
            },
            };
        └───────────────────────────────────────────────┘

        - CLI로 사용
        ┌───────────────────────────────────────────────┐
            npx webpack serve --allowed-hosts .host.com --allowed-hosts host2.com

            npx webpack serve --allowed-hosts all
        └───────────────────────────────────────────────┘        

    4. devServer.client

        - logging 
            'log' | 'info' | 'warn' | 'error' | 'none' | 'verbose'
            . 클라이언트 로그 레벨 설정

        - overlay
            boolean = true object: { errors boolean = true, warnings boolean = true } 
            . 컴파일러 에러 또는 경고  발생시 브라우저에서 전체 화면의 오버레이로 보여줄지 여부

        - progress 
            브라우저에서 퍼센트 단위로 컴파일 과정을 출력할지 설정

        - reconnect 
            boolean = true number
            . 숫자 값  : dev-server에게 클라이언트에 재접속 시도 횟수를 알려준다.
            . true 값  : 무한대로 재접속을 시도한다.

        - webSocketTransport
            'ws' | 'sockjs' string
            . 이 옵션은 클라이언트의 현재 devServer 전송모드를 개별적 선택하거나 사용자 지정 클라이언트 구현을 제공할 수 있다.         
            . 사용자 정의 client 구현을 위해서는 BaseClient를 상속한 클래스를 생성해야 한다.

         - webSocketURL
            string object
            . 웹 소켓 서버에 대한 URL 지정 ( 프락시 서버 사용시 유용 )

        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    client: {
                        logging: 'info',
                        overlay: true,
                        progress: true,
                        reconnect: true,
                        webSocketTransport: require.resolve('./CustomClient'),
                        webSocketURL:{
                            protocol: 'ws',
                            hostname: '0.0.0.0',
                            prot: 8080,
                            pathname: 'ws',
                            username: 'webpack',
                            password: 'dev-server'
                        },
                    },
                     webSocketServer: 'ws',
                },
            };
        └───────────────────────────────────────────────┘ 

        - CLI로 사용
        ┌───────────────────────────────────────────────┐
            npx webpack serve --client-logging info  
            npx webpack serve --client-overlay 
            npx webpack serve --client-progress
            npx webpack serve --no-client-progress
            npx webpack serve --client-reconnect 5
        └───────────────────────────────────────────────┘ 

    5. devServer.compress
        boolean = true
        . gzip 압출을 활성화 한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
            devServer: {
                compress: true,
            },
            };
        └───────────────────────────────────────────────┘         

    6. devServer.devMiddleware
        object 
        . webpack asset를 처리할 webpack-dev-middleware에 대한 옵션을 제공
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    devMiddleware: {
                        index: true,
                        mimeTypes: { phtml: 'text/html' },
                        publicPath: '/publicPathForDevServe',
                        serverSideRender: true,
                        writeToDisk: true,
                    },
                },
            };
        └───────────────────────────────────────────────┘         

    7. devServer.http2
        boolean 
        . spdy를 사용한 HTTP/2 서비스 설정
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                   http2: true,
                },
            };
        └───────────────────────────────────────────────┘                 

    8. devServer.https
        boolean  object
        . dev-server는 기본적으로 HTTP 서비스, 선택적으로 HTTPS 서비스 가능.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    https: {
                            ca: './path/to/server.pem',
                            pfx: './path/to/server.pfx',
                            key: './path/to/server.key',
                            cert: './path/to/server.crt',
                            passphrase: 'webpack-dev-server',
                            requestCert: true,
                        },
                },
            };
        └───────────────────────────────────────────────┘         

   9. devServer.headers
        array function object 
        . 모든 응답값에 헤더 추가
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    headers: { 'X-Custom-Foo': 'bar', },
                }
            };
        └───────────────────────────────────────────────┘                    
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    headers: [
                        { key: 'X-Custom', value: 'foo', },
                        { key: 'Y-Custom', value: 'bar', },
                        ],
                }
            };
        └───────────────────────────────────────────────┘   
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    headers: () => {
                        return { 'X-Bar': ['key1=value1', 'key2=value2'] };
                    },
                }
            };
        └───────────────────────────────────────────────┘                   

   9. devServer.host 
        'local-ip' | 'local-ipv4' | 'local-ipv6' string
        . 사용할 호스트 기술 
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                   host: '0.0.0.0'
                }
            };
        └───────────────────────────────────────────────┘                      

   10. devServer.hot

        'only' boolean = true
        . 웹팩의 Hot Module Replacement 기능 활성화
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  hot: true,
                }
            };
        └───────────────────────────────────────────────┘  

   11. devServer.liveReload
        boolean = true
        . 기본적으로 dev-server는 파일 변경 감지시 페이지를 reload/refresh 한다.
        . liveReload 활성화를 위해서 
           devServer.hot 옵션을 비활성하거나 
           devServer.watchFiles 옵션을 활성화 해야한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  liveReload: false,
                }
            };
        └───────────────────────────────────────────────┘  


   12. devServer.onListening
        function (devServer)
        . dev-server 가 포트 연결을 리스닝 시작 시, 상요자 정의 함수가 실행되도록 한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  onListening: function (devServer) {
                    if (!devServer) {
                        throw new Error('webpack-dev-server is not defined');
                    }

                    const port = devServer.server.address().port;
                    console.log('Listening on port:', port);
                    },
                }
            };
        └───────────────────────────────────────────────┘  

   13. devServer.open
        boolean string [string] object [object]
        . dev-server 시작된 후, 브라우저 오픈 여부
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  open: true,
                }
            };
        └───────────────────────────────────────────────┘  
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  open: ['/my-page'], // 특정 페이지 오픈(다중 지정 가능)
                }
            };
        └───────────────────────────────────────────────┘       

   14. devServer.port
        'auto' string number
        . 요청에 대해 리스닝할 포트 지정 (null, 공백문자가 될 수 없음)
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                  port: 8080,
                }
            };
        └───────────────────────────────────────────────┘  

   15. devServer.proxy
        object [object, function]
        ┌───────────────────────────────────────────────┐
            module.exports = {
                proxy: {
                   '/api': 'http://localhost:3000',
                }
            };
        └───────────────────────────────────────────────┘          

   16. devServer.server
        'http' | 'https' | 'spdy' string object
        . 서버 및 옵션 지정 ( 기본값 : http )
        ┌───────────────────────────────────────────────┐
            module.exports = {
                 server: 'http',
            };
        └───────────────────────────────────────────────┘      
        ┌───────────────────────────────────────────────┐
            module.exports = {
                server:{
                    type: 'https',
                    options:{
                            ca: './path/to/server.pem',
                            pfx: './path/to/server.pfx',
                            key: './path/to/server.key',
                            cert: './path/to/server.crt',
                            passphrase: 'webpack-dev-server',
                            requestCert: true,
                    }
                 }
            };
        └───────────────────────────────────────────────┘              


   17. devServer.static
        boolean string [string] object [object]

        - 지정된 디렉토리로 부터 정적 파일을 제공하기 위한 옵션을 구성. ( 기본값 'public' 디렉토리)
        - false 값은 비활성
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: false,
            };
        └───────────────────────────────────────────────┘   
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: ['assets', 'css'],
            };
        └───────────────────────────────────────────────┘           

        - directory 
            string = path.join(process.cwd(), 'public')
            . 서버에 콘텐츠를 제공할 위치를 알려준다.
            . 이것은 정적 파일을 제공하려는 경우에만 필요.
            . static.publicPath 번들이 어디에서 제공되어야 하고 우선 적용되는지 결정하는데 사용
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    directory: path.join(_-dirname, 'public'),
                }
            };
        └───────────────────────────────────────────────┘    

        - staticOptions
            object 
            . static.directory 로 부터 정적파일 제공할 고급 옵션 구성.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    staticOptions: {
                        redirect: true,
                    },
                }
            };
        └───────────────────────────────────────────────┘  

        - publicPath 
            string = '/' [string]
            . static.directory 콘텐츠를 제공하기 위한 URL 설정.
            . 아래 예에서, assets/manifiest.json 은 
              /serve-url/manifiest.json 으로 제공한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    staticOptions: {
                        directory: path.join(__dirname, 'assets'),
                        publicPath: '/serve-url',
                    },
                }
            };
        └───────────────────────────────────────────────┘  


        - serveIndex 
            boolean object = { icons: true }
            . 활성화 시 serveIndex 미들웨어를 사용한다.
            . serveIndex 미들웨어는 index.html 가 없는 디렉토리에 대해 디렉토리 목록을 생성한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    staticOptions: {
                        directory: path.join(__dirname, 'assets'),
                        serveIndex: true,
                    },
                }
            };
        └───────────────────────────────────────────────┘  

        - watch
            boolean object
            . static.directory 옵션에 의해 제공되는 파일들을 감시하도록 한다.
            . 기본적으로 활성화되어 있고, 파일 변경시 페이지 리로드 한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    staticOptions: {
                        directory: path.join(__dirname, 'assets'),
                        watch: false,
                    },
                }
            };
        └───────────────────────────────────────────────┘          


        - watchFiles
            string [string] object [object]
            . 디렉토리의 파일들을 감시하도록 구성한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                static: {
                    staticOptions: {
                       watchFiles: ['src/**/*.php', 'public/**/*'],
                    },
                }
            };
        └───────────────────────────────────────────────┘                  


   18. devServer.webSocketServer

        false | 'sockjs' | 'ws' string function object
        - 이 옵션은 현재 웹 소켓 서버를 선택하거나 사용자 웹 소켓 서버 구현체를 제공하도록 한다.
        - 현재 기본 모드는 'ws' 이다. 이 모드는 서버로서 ws를 사용하고, 클라이언트에서는 네이티브 웹소켓을 사용한다.
        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    webSocketServer: 'ws',
                },
            };
        └───────────────────────────────────────────────┘    

        ┌───────────────────────────────────────────────┐
            module.exports = {
                devServer: {
                    client: {
                        webSocketTransport: require.resolve('./CustomClient'),
                    },
                    webSocketServer: require.resolve('./CustomServer'),
                },
            };
        └───────────────────────────────────────────────┘            